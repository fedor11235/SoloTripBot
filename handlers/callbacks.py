from aiogram import types
from keyboards.main import get_guide_keyboard
from utils.logger import setup_logger

logger = setup_logger(__name__)

async def handle_guide_callback(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –≥–∞–π–¥–∞"""
    try:
        if callback_query.data == "buy_pdf":
            text = (
                "üì± *PDF –≤–µ—Ä—Å–∏—è –≥–∞–π–¥–∞*\n\n"
                "üéØ *–ß—Ç–æ –≤–∫–ª—é—á–µ–Ω–æ:*\n"
                "‚Ä¢ –ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –≥–∞–π–¥–∞\n"
                "‚Ä¢ –ò–ª–ª—é—Å—Ç—Ä–∞—Ü–∏–∏ –∏ —Å—Ö–µ–º—ã\n"
                "‚Ä¢ –î–æ—Å—Ç—É–ø –Ω–∞–≤—Å–µ–≥–¥–∞\n\n"
                "üí∞ *–¶–µ–Ω–∞: 399‚ÇΩ*\n\n"
                "üìù *–î–ª—è –ø–æ–∫—É–ø–∫–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è*"
            )
        elif callback_query.data == "buy_voice":
            text = (
                "üé§ *–ì–æ–ª–æ—Å–æ–≤–∞—è –≤–µ—Ä—Å–∏—è –≥–∞–π–¥–∞*\n\n"
                "üéØ *–ß—Ç–æ –≤–∫–ª—é—á–µ–Ω–æ:*\n"
                "‚Ä¢ –ê—É–¥–∏–æ–∑–∞–ø–∏—Å—å –≥–∞–π–¥–∞\n"
                "‚Ä¢ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏\n"
                "‚Ä¢ –î–æ—Å—Ç—É–ø –Ω–∞–≤—Å–µ–≥–¥–∞\n\n"
                "üí∞ *–¶–µ–Ω–∞: 499‚ÇΩ*\n\n"
                "üìù *–î–ª—è –ø–æ–∫—É–ø–∫–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è*"
            )
        elif callback_query.data == "buy_package":
            text = (
                "üì¶ *–ü–∞–∫–µ—Ç ¬´–í—ã–∂–∏–≤–∏ —Å–∞–º¬ª*\n\n"
                "üéØ *–ß—Ç–æ –≤–∫–ª—é—á–µ–Ω–æ:*\n"
                "‚Ä¢ PDF –≤–µ—Ä—Å–∏—è –≥–∞–π–¥–∞\n"
                "‚Ä¢ –ì–æ–ª–æ—Å–æ–≤–∞—è –≤–µ—Ä—Å–∏—è\n"
                "‚Ä¢ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã\n"
                "‚Ä¢ –î–æ—Å—Ç—É–ø –Ω–∞–≤—Å–µ–≥–¥–∞\n\n"
                "üí∞ *–¶–µ–Ω–∞: 699‚ÇΩ*\n\n"
                "üìù *–î–ª—è –ø–æ–∫—É–ø–∫–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è*"
            )
        elif callback_query.data == "free_sample":
            text = (
                "üìñ *–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –æ—Ç—Ä—ã–≤–æ–∫ –≥–∞–π–¥–∞*\n\n"
                "üéØ *–ß—Ç–æ –≤–∫–ª—é—á–µ–Ω–æ:*\n"
                "‚Ä¢ –ü–µ—Ä–≤–∞—è –≥–ª–∞–≤–∞\n"
                "‚Ä¢ –ë–∞–∑–æ–≤—ã–µ —Å–æ–≤–µ—Ç—ã\n"
                "‚Ä¢ –ü—Ä–∏–º–µ—Ä—ã –∏–∑ –ø—Ä–∞–∫—Ç–∏–∫–∏\n\n"
                "üí´ *–•–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—É—é –≤–µ—Ä—Å–∏—é?*\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –≤—ã—à–µ üëÜ"
            )
        else:
            logger.warning(f"Unknown callback data: {callback_query.data}")
            await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return

        await callback_query.message.edit_text(text, parse_mode="Markdown")
        await callback_query.answer()
        logger.info(f"User {callback_query.from_user.id} selected guide option: {callback_query.data}")
    except Exception as e:
        logger.error(f"Error in handle_guide_callback: {e}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.") 